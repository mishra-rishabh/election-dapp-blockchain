{"version":3,"sources":["Navbar.js","Body.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","account","className","Body","candi1","candi2","voteCandidate","acc","useState","Candidate","setCandidate","style","width","scope","id","name","voteCount","onSubmit","e","preventDefault","Number","window","alert","onChange","target","value","App","useEffect","loadWeb3","loadBlockchainData","currentAccount","setCurrentAccount","loader","setLoader","ElectionSM","setElectionSM","Candidate1","setCandidate1","Candidate2","setCandidate2","a","ethereum","web3","Web3","enable","currentProvider","eth","getAccounts","accounts","net","getId","networkId","networkData","ElectionAbi","networks","election","Contract","abi","address","methods","candidates","call","candidate_1","candidate_2","candidateId","Vote","send","from","on","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.394c1285.chunk.js","sourcesContent":["import React from 'react' ;\r\n\r\nconst Navbar = ( {account} ) => {\r\n  return (\r\n    <nav className=\"navbar navbar-dark bg-dark shadow mb-5\">\r\n      <p className=\"navbar-brand my-auto mx-4\">Election Dapp</p>\r\n      <ul className=\"navbar-nav\">\r\n        <li className=\"nav-item text-white mx-4\"><h6>Account address:</h6> {account}</li>\r\n      </ul>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default Navbar ;","import React, { useState } from 'react';\r\n\r\nconst Body = ({ candi1, candi2, voteCandidate , acc }) => {\r\n\r\n  const [Candidate, setCandidate] = useState(\"\");\r\n\r\n  // onchange function which is called below in the select element\r\n  const onchange = (e) => {\r\n    setCandidate(e.target.value)\r\n  };\r\n\r\n  // onsubmit function which is called below in the form element\r\n  const onsubmit = ( e ) => {\r\n    e.preventDefault() ;\r\n\r\n    if( Candidate.id !== 0 ) {\r\n      voteCandidate( Number( Candidate ) ) ;\r\n    }\r\n    else {\r\n      window.alert( \"Error in casting vote!!\" ) ;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1 className=\"display-1 text-center\">Election Results</h1>\r\n\r\n      <table className=\"table table-dark table-striped text-center mx-auto\" style={{ width: \"90%\" }}>\r\n        <thead>\r\n          <tr>\r\n            <th scope=\"col\">Id</th>\r\n            <th scope=\"col\">Candidate Name</th>\r\n            <th scope=\"col\">Vote Count</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <th scope=\"row\">{candi1.id}</th>\r\n            <td>{candi1.name}</td>\r\n            <td>{candi1.voteCount}</td>\r\n          </tr>\r\n          <tr>\r\n            <th scope=\"row\">{candi2.id}</th>\r\n            <td>{candi2.name}</td>\r\n            <td>{candi2.voteCount}</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n\r\n      <div className=\"my-5 text-left mx-auto\" style={{ width: \"70%\" }}>\r\n        <h5 className=\"\">Cast your vote: </h5>\r\n\r\n        <form onSubmit={onsubmit}>\r\n          <select name=\"candidate\" className=\"form-select\" onChange={onchange}>\r\n            <option value=\"\">---Select---</option>\r\n            <option value=\"1\">{candi1.name}</option>\r\n            <option value=\"2\">{candi2.name}</option>\r\n          </select>\r\n          <button className=\"btn btn-outline-primary btn-block w-100 mt-2\">\r\n            Vote Candidate {\" \"} {Candidate}\r\n          </button>\r\n\r\n        </form>\r\n      </div>\r\n\r\n      <p className=\"my-5 mx-auto text-center\">\r\n        Your address: <span className=\"font-weight-bold\"></span> {acc}\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Body;","import React , { useEffect , useState } from 'react' ;\nimport Web3 from 'web3' ;\nimport './App.css';\nimport ElectionAbi from './contracts/Election.json' ;\nimport Navbar from './Navbar' ;\nimport Body from './Body' ;\n\nfunction App() {\n\n  // act as a constructor\n  useEffect( () => {\n    loadWeb3() ;\n    loadBlockchainData() ;\n  } , [] ) ;\n\n  // state variable with type string\n  const [ currentAccount , setCurrentAccount ] = useState( \"\" ) ;  \n  const [ loader , setLoader ] = useState( true ) ;\n  const [ ElectionSM , setElectionSM ] = useState() ;\n  const [ Candidate1 , setCandidate1 ] = useState() ;\n  const [ Candidate2 , setCandidate2 ] = useState() ;\n\n  // code to interact with web3\n  const loadWeb3 = async() => {\n    if( window.ethereum ) {\n      window.web3 = new Web3( window.ethereum ) ;\n      await window.ethereum.enable() ;\n    }\n    else if( window.web3 ) {\n      window.web3 = new Web3( window.web3.currentProvider ) ;\n    }\n    else {\n      window.alert( \"Non-ethereum browser detected. You should consider trying Metamask\" ) ;\n    }\n  } ;\n\n  const loadBlockchainData = async() => {\n    \n    setLoader( true ) ;\n    // access Web3\n    const web3 = window.web3 ;\n\n    // fetch all accounts\n    const accounts = await web3.eth.getAccounts() ;\n    const account = accounts[ 0 ] ;\n    setCurrentAccount( account ) ;\n\n    // fetch the network id\n    const networkId = await web3.eth.net.getId() ;\n\n    const networkData = ElectionAbi.networks[ networkId ] ;\n\n    if( networkData ) {\n      // define a smart contract so that we can interact with it\n      const election = new web3.eth.Contract( ElectionAbi.abi , networkData.address ) ;\n\n      // fetch the candidates from smart contract. here candidates is a mapping from Election.sol\n      // mapping is a viewable function that's why we have used call()\n      // because it doesn't require any gas for the transaction\n      const candidate_1 = await election.methods.candidates( 1 ).call() ; \n      const candidate_2 = await election.methods.candidates( 2 ).call() ;\n      \n      // extra details to be fetched\n      // const candidate_1_Id = candidate_1.id ;\n      // const candidate_2_Id = candidate_2.id ;\n\n      // const candidate_1_Name = candidate_1.name ;\n      // const candidate_2_Name = candidate_2.name ;\n\n      // const candidate_1_VoteCount = candidate_1.voteCount ;\n      // const candidate_2_VoteCount = candidate_2.voteCount ;\n\n      // console.log( candidate_1_Id ) ;\n      // console.log( candidate_2_Id ) ;\n      // console.log( candidate_1_Name ) ;\n      // console.log( candidate_2_Name ) ;\n      // console.log( candidate_1_VoteCount ) ;\n      // console.log( candidate_2_VoteCount ) ;\n\n      setCandidate1( candidate_1 ) ;\n      setCandidate2( candidate_2 ) ;\n      setElectionSM( election ) ;\n\n      // console.log( election ) ;\n      \n      setLoader( false ) ;\n    }\n    else {\n      window.alert( \"The smart contract is not deployed on the current network!!\" ) ;\n    }\n  }\n\n  // function which will call the Vote() of Election.sol\n  const voteCandidate = async( candidateId ) => {\n    setLoader( true ) ;\n    await ElectionSM.methods\n    .Vote( candidateId )\n    .send( { from: currentAccount } )\n    .on( 'transactionhash' , () => {\n      console.log( \"Successfully ran\" ) ;\n    } )\n\n    setLoader( false ) ;\n  } \n\n  if( loader ) {\n    return <div>loading...</div>\n  }\n\n  return (\n    <div>\n      <Navbar account={ currentAccount }/>\n      <Body candi1={ Candidate1 } candi2={ Candidate2 } voteCandidate={ voteCandidate } acc={ currentAccount }/>      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport \"bootstrap/dist/css/bootstrap.min.css\" ;\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}